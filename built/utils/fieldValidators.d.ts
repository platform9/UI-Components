export declare class FieldValidator {
    validate: any;
    errorMessage: any;
    /**
     * @param validationFn Function
     * @param errorMessage String
     */
    constructor(validationFn: any, errorMessage: any);
    withMessage: import("moize").Moized<(message: any) => FieldValidator, Partial<{
        isDeepEqual: boolean;
        isPromise: boolean;
        isReact: boolean;
        isSerialized: boolean;
        isShallowEqual: boolean;
        matchesArg: import("moize").IsEqual;
        matchesKey: import("moize").IsMatchingKey;
        maxAge: number;
        maxArgs: number;
        maxSize: number;
        onCacheAdd: import("moize").OnCacheOperation<(message: any) => FieldValidator>;
        onCacheChange: import("moize").OnCacheOperation<(message: any) => FieldValidator>;
        onCacheHit: import("moize").OnCacheOperation<(message: any) => FieldValidator>;
        onExpire: import("moize").OnExpire;
        profileName: string;
        serializer: import("moize").Serialize;
        transformArgs: import("moize").TransformKey;
        updateCacheForKey: import("moize").UpdateCacheForKey;
        updateExpire: boolean;
    }> & Partial<{
        isDeepEqual: boolean;
        isPromise: boolean;
        isReact: boolean;
        isSerialized: boolean;
        isShallowEqual: boolean;
        matchesArg: import("moize").IsEqual;
        matchesKey: import("moize").IsMatchingKey;
        maxAge: number;
        maxArgs: number;
        maxSize: number;
        onCacheAdd: import("moize").OnCacheOperation<import("moize").Moizeable>;
        onCacheChange: import("moize").OnCacheOperation<import("moize").Moizeable>;
        onCacheHit: import("moize").OnCacheOperation<import("moize").Moizeable>;
        onExpire: import("moize").OnExpire;
        profileName: string;
        serializer: import("moize").Serialize;
        transformArgs: import("moize").TransformKey;
        updateCacheForKey: import("moize").UpdateCacheForKey;
        updateExpire: boolean;
    }> & {
        maxSize: number;
    } & Partial<import("../utils/misc").DefaultMoizeOptions>>;
}
export declare const customValidator: (validator: any, errorMessage?: any) => FieldValidator;
export declare const hasMinLength: (minLen: any) => (value: any) => boolean;
export declare const hasOneLowerChar: (str: string) => boolean;
export declare const hasOneUpperChar: (str: string) => boolean;
export declare const hasOneNumber: (str: string) => boolean;
export declare const specialChars = "-+!@#$%^&*()?";
export declare const hasOneSpecialChar: (str: string) => boolean;
export declare const masterNodesLengthErrorMsg = "You can only have 1, 3 or 5 master nodes";
export declare const masterNodeLengthValidator: FieldValidator;
export declare const cloudProviderValidator: FieldValidator;
export declare const namespaceValidator: FieldValidator;
export declare const emailValidator: FieldValidator;
export declare const requiredValidator: FieldValidator;
export declare const matchFieldValidator: import("moize").Moized<(id: any) => FieldValidator, Partial<{
    isDeepEqual: boolean;
    isPromise: boolean;
    isReact: boolean;
    isSerialized: boolean;
    isShallowEqual: boolean;
    matchesArg: import("moize").IsEqual;
    matchesKey: import("moize").IsMatchingKey;
    maxAge: number;
    maxArgs: number;
    maxSize: number;
    onCacheAdd: import("moize").OnCacheOperation<(id: any) => FieldValidator>;
    onCacheChange: import("moize").OnCacheOperation<(id: any) => FieldValidator>;
    onCacheHit: import("moize").OnCacheOperation<(id: any) => FieldValidator>;
    onExpire: import("moize").OnExpire;
    profileName: string;
    serializer: import("moize").Serialize;
    transformArgs: import("moize").TransformKey;
    updateCacheForKey: import("moize").UpdateCacheForKey;
    updateExpire: boolean;
}> & Partial<{
    isDeepEqual: boolean;
    isPromise: boolean;
    isReact: boolean;
    isSerialized: boolean;
    isShallowEqual: boolean;
    matchesArg: import("moize").IsEqual;
    matchesKey: import("moize").IsMatchingKey;
    maxAge: number;
    maxArgs: number;
    maxSize: number;
    onCacheAdd: import("moize").OnCacheOperation<import("moize").Moizeable>;
    onCacheChange: import("moize").OnCacheOperation<import("moize").Moizeable>;
    onCacheHit: import("moize").OnCacheOperation<import("moize").Moizeable>;
    onExpire: import("moize").OnExpire;
    profileName: string;
    serializer: import("moize").Serialize;
    transformArgs: import("moize").TransformKey;
    updateCacheForKey: import("moize").UpdateCacheForKey;
    updateExpire: boolean;
}> & {
    maxSize: number;
} & Partial<import("../utils/misc").DefaultMoizeOptions>>;
export declare const lengthValidator: (minLength: any, maxLength: any) => FieldValidator;
export declare const minLengthValidator: import("moize").Moized<(minLength: any) => FieldValidator, Partial<{
    isDeepEqual: boolean;
    isPromise: boolean;
    isReact: boolean;
    isSerialized: boolean;
    isShallowEqual: boolean;
    matchesArg: import("moize").IsEqual;
    matchesKey: import("moize").IsMatchingKey;
    maxAge: number;
    maxArgs: number;
    maxSize: number;
    onCacheAdd: import("moize").OnCacheOperation<(minLength: any) => FieldValidator>;
    onCacheChange: import("moize").OnCacheOperation<(minLength: any) => FieldValidator>;
    onCacheHit: import("moize").OnCacheOperation<(minLength: any) => FieldValidator>;
    onExpire: import("moize").OnExpire;
    profileName: string;
    serializer: import("moize").Serialize;
    transformArgs: import("moize").TransformKey;
    updateCacheForKey: import("moize").UpdateCacheForKey;
    updateExpire: boolean;
}> & Partial<{
    isDeepEqual: boolean;
    isPromise: boolean;
    isReact: boolean;
    isSerialized: boolean;
    isShallowEqual: boolean;
    matchesArg: import("moize").IsEqual;
    matchesKey: import("moize").IsMatchingKey;
    maxAge: number;
    maxArgs: number;
    maxSize: number;
    onCacheAdd: import("moize").OnCacheOperation<import("moize").Moizeable>;
    onCacheChange: import("moize").OnCacheOperation<import("moize").Moizeable>;
    onCacheHit: import("moize").OnCacheOperation<import("moize").Moizeable>;
    onExpire: import("moize").OnExpire;
    profileName: string;
    serializer: import("moize").Serialize;
    transformArgs: import("moize").TransformKey;
    updateCacheForKey: import("moize").UpdateCacheForKey;
    updateExpire: boolean;
}> & {
    maxSize: number;
} & Partial<import("../utils/misc").DefaultMoizeOptions>>;
export declare const maxLengthValidator: import("moize").Moized<(maxLength: any) => FieldValidator, Partial<{
    isDeepEqual: boolean;
    isPromise: boolean;
    isReact: boolean;
    isSerialized: boolean;
    isShallowEqual: boolean;
    matchesArg: import("moize").IsEqual;
    matchesKey: import("moize").IsMatchingKey;
    maxAge: number;
    maxArgs: number;
    maxSize: number;
    onCacheAdd: import("moize").OnCacheOperation<(maxLength: any) => FieldValidator>;
    onCacheChange: import("moize").OnCacheOperation<(maxLength: any) => FieldValidator>;
    onCacheHit: import("moize").OnCacheOperation<(maxLength: any) => FieldValidator>;
    onExpire: import("moize").OnExpire;
    profileName: string;
    serializer: import("moize").Serialize;
    transformArgs: import("moize").TransformKey;
    updateCacheForKey: import("moize").UpdateCacheForKey;
    updateExpire: boolean;
}> & Partial<{
    isDeepEqual: boolean;
    isPromise: boolean;
    isReact: boolean;
    isSerialized: boolean;
    isShallowEqual: boolean;
    matchesArg: import("moize").IsEqual;
    matchesKey: import("moize").IsMatchingKey;
    maxAge: number;
    maxArgs: number;
    maxSize: number;
    onCacheAdd: import("moize").OnCacheOperation<import("moize").Moizeable>;
    onCacheChange: import("moize").OnCacheOperation<import("moize").Moizeable>;
    onCacheHit: import("moize").OnCacheOperation<import("moize").Moizeable>;
    onExpire: import("moize").OnExpire;
    profileName: string;
    serializer: import("moize").Serialize;
    transformArgs: import("moize").TransformKey;
    updateCacheForKey: import("moize").UpdateCacheForKey;
    updateExpire: boolean;
}> & {
    maxSize: number;
} & Partial<import("../utils/misc").DefaultMoizeOptions>>;
export declare const minValueValidator: import("moize").Moized<(min: any) => FieldValidator, Partial<{
    isDeepEqual: boolean;
    isPromise: boolean;
    isReact: boolean;
    isSerialized: boolean;
    isShallowEqual: boolean;
    matchesArg: import("moize").IsEqual;
    matchesKey: import("moize").IsMatchingKey;
    maxAge: number;
    maxArgs: number;
    maxSize: number;
    onCacheAdd: import("moize").OnCacheOperation<(min: any) => FieldValidator>;
    onCacheChange: import("moize").OnCacheOperation<(min: any) => FieldValidator>;
    onCacheHit: import("moize").OnCacheOperation<(min: any) => FieldValidator>;
    onExpire: import("moize").OnExpire;
    profileName: string;
    serializer: import("moize").Serialize;
    transformArgs: import("moize").TransformKey;
    updateCacheForKey: import("moize").UpdateCacheForKey;
    updateExpire: boolean;
}> & Partial<{
    isDeepEqual: boolean;
    isPromise: boolean;
    isReact: boolean;
    isSerialized: boolean;
    isShallowEqual: boolean;
    matchesArg: import("moize").IsEqual;
    matchesKey: import("moize").IsMatchingKey;
    maxAge: number;
    maxArgs: number;
    maxSize: number;
    onCacheAdd: import("moize").OnCacheOperation<import("moize").Moizeable>;
    onCacheChange: import("moize").OnCacheOperation<import("moize").Moizeable>;
    onCacheHit: import("moize").OnCacheOperation<import("moize").Moizeable>;
    onExpire: import("moize").OnExpire;
    profileName: string;
    serializer: import("moize").Serialize;
    transformArgs: import("moize").TransformKey;
    updateCacheForKey: import("moize").UpdateCacheForKey;
    updateExpire: boolean;
}> & {
    maxSize: number;
} & Partial<import("../utils/misc").DefaultMoizeOptions>>;
export declare const rangeValueValidator: import("moize").Moized<(min: any, max: any) => FieldValidator, Partial<{
    isDeepEqual: boolean;
    isPromise: boolean;
    isReact: boolean;
    isSerialized: boolean;
    isShallowEqual: boolean;
    matchesArg: import("moize").IsEqual;
    matchesKey: import("moize").IsMatchingKey;
    maxAge: number;
    maxArgs: number;
    maxSize: number;
    onCacheAdd: import("moize").OnCacheOperation<(min: any, max: any) => FieldValidator>;
    onCacheChange: import("moize").OnCacheOperation<(min: any, max: any) => FieldValidator>;
    onCacheHit: import("moize").OnCacheOperation<(min: any, max: any) => FieldValidator>;
    onExpire: import("moize").OnExpire;
    profileName: string;
    serializer: import("moize").Serialize;
    transformArgs: import("moize").TransformKey;
    updateCacheForKey: import("moize").UpdateCacheForKey;
    updateExpire: boolean;
}> & Partial<{
    isDeepEqual: boolean;
    isPromise: boolean;
    isReact: boolean;
    isSerialized: boolean;
    isShallowEqual: boolean;
    matchesArg: import("moize").IsEqual;
    matchesKey: import("moize").IsMatchingKey;
    maxAge: number;
    maxArgs: number;
    maxSize: number;
    onCacheAdd: import("moize").OnCacheOperation<import("moize").Moizeable>;
    onCacheChange: import("moize").OnCacheOperation<import("moize").Moizeable>;
    onCacheHit: import("moize").OnCacheOperation<import("moize").Moizeable>;
    onExpire: import("moize").OnExpire;
    profileName: string;
    serializer: import("moize").Serialize;
    transformArgs: import("moize").TransformKey;
    updateCacheForKey: import("moize").UpdateCacheForKey;
    updateExpire: boolean;
}> & {
    maxSize: number;
} & Partial<import("../utils/misc").DefaultMoizeOptions>>;
export declare const maxValueValidator: import("moize").Moized<(max: any) => FieldValidator, Partial<{
    isDeepEqual: boolean;
    isPromise: boolean;
    isReact: boolean;
    isSerialized: boolean;
    isShallowEqual: boolean;
    matchesArg: import("moize").IsEqual;
    matchesKey: import("moize").IsMatchingKey;
    maxAge: number;
    maxArgs: number;
    maxSize: number;
    onCacheAdd: import("moize").OnCacheOperation<(max: any) => FieldValidator>;
    onCacheChange: import("moize").OnCacheOperation<(max: any) => FieldValidator>;
    onCacheHit: import("moize").OnCacheOperation<(max: any) => FieldValidator>;
    onExpire: import("moize").OnExpire;
    profileName: string;
    serializer: import("moize").Serialize;
    transformArgs: import("moize").TransformKey;
    updateCacheForKey: import("moize").UpdateCacheForKey;
    updateExpire: boolean;
}> & Partial<{
    isDeepEqual: boolean;
    isPromise: boolean;
    isReact: boolean;
    isSerialized: boolean;
    isShallowEqual: boolean;
    matchesArg: import("moize").IsEqual;
    matchesKey: import("moize").IsMatchingKey;
    maxAge: number;
    maxArgs: number;
    maxSize: number;
    onCacheAdd: import("moize").OnCacheOperation<import("moize").Moizeable>;
    onCacheChange: import("moize").OnCacheOperation<import("moize").Moizeable>;
    onCacheHit: import("moize").OnCacheOperation<import("moize").Moizeable>;
    onExpire: import("moize").OnExpire;
    profileName: string;
    serializer: import("moize").Serialize;
    transformArgs: import("moize").TransformKey;
    updateCacheForKey: import("moize").UpdateCacheForKey;
    updateExpire: boolean;
}> & {
    maxSize: number;
} & Partial<import("../utils/misc").DefaultMoizeOptions>>;
export declare const passwordValidator: FieldValidator;
export declare const colorHexValidator: FieldValidator;
export declare const spotMaxPriceValidator: FieldValidator;
export declare const validators: {
    email: FieldValidator;
    password: FieldValidator;
    required: FieldValidator;
    matchField: import("moize").Moized<(id: any) => FieldValidator, Partial<{
        isDeepEqual: boolean;
        isPromise: boolean;
        isReact: boolean;
        isSerialized: boolean;
        isShallowEqual: boolean;
        matchesArg: import("moize").IsEqual;
        matchesKey: import("moize").IsMatchingKey;
        maxAge: number;
        maxArgs: number;
        maxSize: number;
        onCacheAdd: import("moize").OnCacheOperation<(id: any) => FieldValidator>;
        onCacheChange: import("moize").OnCacheOperation<(id: any) => FieldValidator>;
        onCacheHit: import("moize").OnCacheOperation<(id: any) => FieldValidator>;
        onExpire: import("moize").OnExpire;
        profileName: string;
        serializer: import("moize").Serialize;
        transformArgs: import("moize").TransformKey;
        updateCacheForKey: import("moize").UpdateCacheForKey;
        updateExpire: boolean;
    }> & Partial<{
        isDeepEqual: boolean;
        isPromise: boolean;
        isReact: boolean;
        isSerialized: boolean;
        isShallowEqual: boolean;
        matchesArg: import("moize").IsEqual;
        matchesKey: import("moize").IsMatchingKey;
        maxAge: number;
        maxArgs: number;
        maxSize: number;
        onCacheAdd: import("moize").OnCacheOperation<import("moize").Moizeable>;
        onCacheChange: import("moize").OnCacheOperation<import("moize").Moizeable>;
        onCacheHit: import("moize").OnCacheOperation<import("moize").Moizeable>;
        onExpire: import("moize").OnExpire;
        profileName: string;
        serializer: import("moize").Serialize;
        transformArgs: import("moize").TransformKey;
        updateCacheForKey: import("moize").UpdateCacheForKey;
        updateExpire: boolean;
    }> & {
        maxSize: number;
    } & Partial<import("../utils/misc").DefaultMoizeOptions>>;
    length: (minLength: any, maxLength: any) => FieldValidator;
    minLength: import("moize").Moized<(minLength: any) => FieldValidator, Partial<{
        isDeepEqual: boolean;
        isPromise: boolean;
        isReact: boolean;
        isSerialized: boolean;
        isShallowEqual: boolean;
        matchesArg: import("moize").IsEqual;
        matchesKey: import("moize").IsMatchingKey;
        maxAge: number;
        maxArgs: number;
        maxSize: number;
        onCacheAdd: import("moize").OnCacheOperation<(minLength: any) => FieldValidator>;
        onCacheChange: import("moize").OnCacheOperation<(minLength: any) => FieldValidator>;
        onCacheHit: import("moize").OnCacheOperation<(minLength: any) => FieldValidator>;
        onExpire: import("moize").OnExpire;
        profileName: string;
        serializer: import("moize").Serialize;
        transformArgs: import("moize").TransformKey;
        updateCacheForKey: import("moize").UpdateCacheForKey;
        updateExpire: boolean;
    }> & Partial<{
        isDeepEqual: boolean;
        isPromise: boolean;
        isReact: boolean;
        isSerialized: boolean;
        isShallowEqual: boolean;
        matchesArg: import("moize").IsEqual;
        matchesKey: import("moize").IsMatchingKey;
        maxAge: number;
        maxArgs: number;
        maxSize: number;
        onCacheAdd: import("moize").OnCacheOperation<import("moize").Moizeable>;
        onCacheChange: import("moize").OnCacheOperation<import("moize").Moizeable>;
        onCacheHit: import("moize").OnCacheOperation<import("moize").Moizeable>;
        onExpire: import("moize").OnExpire;
        profileName: string;
        serializer: import("moize").Serialize;
        transformArgs: import("moize").TransformKey;
        updateCacheForKey: import("moize").UpdateCacheForKey;
        updateExpire: boolean;
    }> & {
        maxSize: number;
    } & Partial<import("../utils/misc").DefaultMoizeOptions>>;
    maxLength: import("moize").Moized<(maxLength: any) => FieldValidator, Partial<{
        isDeepEqual: boolean;
        isPromise: boolean;
        isReact: boolean;
        isSerialized: boolean;
        isShallowEqual: boolean;
        matchesArg: import("moize").IsEqual;
        matchesKey: import("moize").IsMatchingKey;
        maxAge: number;
        maxArgs: number;
        maxSize: number;
        onCacheAdd: import("moize").OnCacheOperation<(maxLength: any) => FieldValidator>;
        onCacheChange: import("moize").OnCacheOperation<(maxLength: any) => FieldValidator>;
        onCacheHit: import("moize").OnCacheOperation<(maxLength: any) => FieldValidator>;
        onExpire: import("moize").OnExpire;
        profileName: string;
        serializer: import("moize").Serialize;
        transformArgs: import("moize").TransformKey;
        updateCacheForKey: import("moize").UpdateCacheForKey;
        updateExpire: boolean;
    }> & Partial<{
        isDeepEqual: boolean;
        isPromise: boolean;
        isReact: boolean;
        isSerialized: boolean;
        isShallowEqual: boolean;
        matchesArg: import("moize").IsEqual;
        matchesKey: import("moize").IsMatchingKey;
        maxAge: number;
        maxArgs: number;
        maxSize: number;
        onCacheAdd: import("moize").OnCacheOperation<import("moize").Moizeable>;
        onCacheChange: import("moize").OnCacheOperation<import("moize").Moizeable>;
        onCacheHit: import("moize").OnCacheOperation<import("moize").Moizeable>;
        onExpire: import("moize").OnExpire;
        profileName: string;
        serializer: import("moize").Serialize;
        transformArgs: import("moize").TransformKey;
        updateCacheForKey: import("moize").UpdateCacheForKey;
        updateExpire: boolean;
    }> & {
        maxSize: number;
    } & Partial<import("../utils/misc").DefaultMoizeOptions>>;
    minValue: import("moize").Moized<(min: any) => FieldValidator, Partial<{
        isDeepEqual: boolean;
        isPromise: boolean;
        isReact: boolean;
        isSerialized: boolean;
        isShallowEqual: boolean;
        matchesArg: import("moize").IsEqual;
        matchesKey: import("moize").IsMatchingKey;
        maxAge: number;
        maxArgs: number;
        maxSize: number;
        onCacheAdd: import("moize").OnCacheOperation<(min: any) => FieldValidator>;
        onCacheChange: import("moize").OnCacheOperation<(min: any) => FieldValidator>;
        onCacheHit: import("moize").OnCacheOperation<(min: any) => FieldValidator>;
        onExpire: import("moize").OnExpire;
        profileName: string;
        serializer: import("moize").Serialize;
        transformArgs: import("moize").TransformKey;
        updateCacheForKey: import("moize").UpdateCacheForKey;
        updateExpire: boolean;
    }> & Partial<{
        isDeepEqual: boolean;
        isPromise: boolean;
        isReact: boolean;
        isSerialized: boolean;
        isShallowEqual: boolean;
        matchesArg: import("moize").IsEqual;
        matchesKey: import("moize").IsMatchingKey;
        maxAge: number;
        maxArgs: number;
        maxSize: number;
        onCacheAdd: import("moize").OnCacheOperation<import("moize").Moizeable>;
        onCacheChange: import("moize").OnCacheOperation<import("moize").Moizeable>;
        onCacheHit: import("moize").OnCacheOperation<import("moize").Moizeable>;
        onExpire: import("moize").OnExpire;
        profileName: string;
        serializer: import("moize").Serialize;
        transformArgs: import("moize").TransformKey;
        updateCacheForKey: import("moize").UpdateCacheForKey;
        updateExpire: boolean;
    }> & {
        maxSize: number;
    } & Partial<import("../utils/misc").DefaultMoizeOptions>>;
    maxValue: import("moize").Moized<(max: any) => FieldValidator, Partial<{
        isDeepEqual: boolean;
        isPromise: boolean;
        isReact: boolean;
        isSerialized: boolean;
        isShallowEqual: boolean;
        matchesArg: import("moize").IsEqual;
        matchesKey: import("moize").IsMatchingKey;
        maxAge: number;
        maxArgs: number;
        maxSize: number;
        onCacheAdd: import("moize").OnCacheOperation<(max: any) => FieldValidator>;
        onCacheChange: import("moize").OnCacheOperation<(max: any) => FieldValidator>;
        onCacheHit: import("moize").OnCacheOperation<(max: any) => FieldValidator>;
        onExpire: import("moize").OnExpire;
        profileName: string;
        serializer: import("moize").Serialize;
        transformArgs: import("moize").TransformKey;
        updateCacheForKey: import("moize").UpdateCacheForKey;
        updateExpire: boolean;
    }> & Partial<{
        isDeepEqual: boolean;
        isPromise: boolean;
        isReact: boolean;
        isSerialized: boolean;
        isShallowEqual: boolean;
        matchesArg: import("moize").IsEqual;
        matchesKey: import("moize").IsMatchingKey;
        maxAge: number;
        maxArgs: number;
        maxSize: number;
        onCacheAdd: import("moize").OnCacheOperation<import("moize").Moizeable>;
        onCacheChange: import("moize").OnCacheOperation<import("moize").Moizeable>;
        onCacheHit: import("moize").OnCacheOperation<import("moize").Moizeable>;
        onExpire: import("moize").OnExpire;
        profileName: string;
        serializer: import("moize").Serialize;
        transformArgs: import("moize").TransformKey;
        updateCacheForKey: import("moize").UpdateCacheForKey;
        updateExpire: boolean;
    }> & {
        maxSize: number;
    } & Partial<import("../utils/misc").DefaultMoizeOptions>>;
    rangeValue: import("moize").Moized<(min: any, max: any) => FieldValidator, Partial<{
        isDeepEqual: boolean;
        isPromise: boolean;
        isReact: boolean;
        isSerialized: boolean;
        isShallowEqual: boolean;
        matchesArg: import("moize").IsEqual;
        matchesKey: import("moize").IsMatchingKey;
        maxAge: number;
        maxArgs: number;
        maxSize: number;
        onCacheAdd: import("moize").OnCacheOperation<(min: any, max: any) => FieldValidator>;
        onCacheChange: import("moize").OnCacheOperation<(min: any, max: any) => FieldValidator>;
        onCacheHit: import("moize").OnCacheOperation<(min: any, max: any) => FieldValidator>;
        onExpire: import("moize").OnExpire;
        profileName: string;
        serializer: import("moize").Serialize;
        transformArgs: import("moize").TransformKey;
        updateCacheForKey: import("moize").UpdateCacheForKey;
        updateExpire: boolean;
    }> & Partial<{
        isDeepEqual: boolean;
        isPromise: boolean;
        isReact: boolean;
        isSerialized: boolean;
        isShallowEqual: boolean;
        matchesArg: import("moize").IsEqual;
        matchesKey: import("moize").IsMatchingKey;
        maxAge: number;
        maxArgs: number;
        maxSize: number;
        onCacheAdd: import("moize").OnCacheOperation<import("moize").Moizeable>;
        onCacheChange: import("moize").OnCacheOperation<import("moize").Moizeable>;
        onCacheHit: import("moize").OnCacheOperation<import("moize").Moizeable>;
        onExpire: import("moize").OnExpire;
        profileName: string;
        serializer: import("moize").Serialize;
        transformArgs: import("moize").TransformKey;
        updateCacheForKey: import("moize").UpdateCacheForKey;
        updateExpire: boolean;
    }> & {
        maxSize: number;
    } & Partial<import("../utils/misc").DefaultMoizeOptions>>;
};
export declare const parseValidator: (key: any, spec: any) => any;
export declare const yamlValidator: FieldValidator;
export declare const jsonValidator: FieldValidator;
